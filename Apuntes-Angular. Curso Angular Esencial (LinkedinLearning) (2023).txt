
Apuntes-Angular. Curso Angular Esencial (LinkedinLearning) (2023)

¿Qué es Angular? *********************************

+ Una plataforma basada en Javascript
+ Puede ejecutarse en móviles, servidores y navegadores
+ Alto rendimiento pensada para ejecutarse en dispositivos móviles (Mobile first)
+ Código abierto, apoyado por Google (Javascript) y Microsoft (Typescript)


@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
¿Cómo funciona? **********************************


+Punto de entrada: Módulo principal
->Componente(s) : Tiempo de vida en función de tiempo de uso
-->Componente (encapsulado)
-->Componente (encapsulado)
->Servicios: Permiten la comunicación entre componentes y la aplicación
-- Vivos a lo largo de toda la aplicación / En memoria

Una vez definidos los componentes, tenemos:

#1º Código fuente: Conjunto de archivos en javascript, typescript, html, css
con los que desarrollamos nuestra aplicación
Esto una vez que se cargue dentro de un navegador va a cambiar cuando Angular se ejecute

#2º Angular: Cuando Angular entre por primera vez tomará todo el código y lo va a reescribir
en algunos casos simplemente añadirá algunos atributos extra dentro del HTML
en otros casos va reescribirlo por completo dependiendo de nuestro código
y de la funcionalidad que hayamos definido.

#3ºApp: Este producto que va a salir a partir del proceso o render de Angular
va a ser lo que nosotros vamos a llamar la aplicación

La aplicación va a interactuar con el código que hemos desarrollado en Typescript
a través de diferentes elementos como:
+Eventos
+Bindings/modelos

Así cuando el usuario modifique la información por ejemplo rellenando un formulario
o elementos que se encuentran dentro de la aplicación
podemos también modificar la información que se encuentre ahí
y a partir de esa modificación enviar a Angular que va a responder con un proceso

que puede ser enviar al usuario a otra pantalla, modificar los datos presentados, 
o simplemente realizar una compra.

#4º Eventos: También vamos a tener los eventos que van a ser a partir del teclado, 
movil, interación para responder a las interacciones.


@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
Partes de una app Angular

#1º Módulos .................................................

Punto de entrada de nuestra aplicación, 
lo primero que se carga al ejecutar una aplicación Angular

+Toda apliación contiene al menos un módulo principal

+Agrupa diferentes funcionalidades de la apliación:
Si utilizamos librerías internas, librerías externas, 
estamos definiendo los componentes de nuestra apliación,
las rutas, los servicios, todos los elementos con los que vamos a trabajar
se van a cargar en este componente principal.
Y nos va a definir cómo va a trabajar nuestra aplicación y con qué va a comenzar a trabajar.

Un poco de código de emplo de un módulo: app.module.ts

+Código 1º Imports
import {BrowseModule} from '@angular/plataform-browser';
... ...

+Código 2º Tenemos un elemento que es el que define nuestro módulo es el decorador
@NgModule ({ --------> Decorador
así es como vamos a declarar que el código que estamos utilizando es un módulo

+Código 3º declarations
declarations: [ -----> Definimos los distintos componentes con los que estamos trabajando
	AppComponent
]

+Código 4º imports
imports: [ 	----------> Imports o módulos importados con los que estamos trabajano
			----------> y van a estar disponibles en nuestra aplicación para trabajar con los componentes
			----------> podemos incluir módulos de Angular y módulos externos
	BrowseModule, FormsModule, HttpModule
], 

+Código 5º providers
providers: [] --------> Servicios con los que vamos a trabajar en nuestra aplicación
			  --------> y que se van a mantener disponibles durante toda la vida útil de nuestra apliación
			  --------> almacenando y transporando datos.
+Código 6º bootstrap
bootstrap: [AppComponent]


#2º Componentes .................................................
El componente es el bloque central de construcción de una aplicación
todos los elementos que tengamos de interacción o de contenido dentro de una apliación Angular
se va a contener dentro de un componente.

+ Son los bloques o ladrillos de construcción de una apliación
+ Los componentes pueden estar anidados entre sí
  Podemos tener múltiples componentes dentro de una pantalla
  y a su vez tener múltiples componentes dentro de un componente.
+ El componente tiene un tiempo de vida útil de hecho tiene un ciclo de vida.
+ El componete se va a cargar cuando nosotros empecemos a utilizarlo
  y dependiendo de la arquitectura puede invocar a otros componentes.
+ Cuando dejamos de utilizar un componente se elemina de la memoria
+ Cada componente trabaja por separado y podemos tener componentes dentro de otros componentes
  los componentes siempre va a estar encapsulados
  y pueden comunicarse entre sí a través de inputs, outputs y servicios

Un poco de código de emplo de un componente: 

+Código 1º Imports --> Importamos las funcionalidades que vamos a tener

import {Component, OnInit} from '@angular/core';

+Código 2º Tenemos un elemento que es el que define nuestro componente es el decorador
@Component ({ --------> Decorador
			  --------> así es como vamos a declarar que el código que estamos utilizando es un componente
			  --------> incluye el concepto de Typescript de Metadatos
			  --------> que nos permite configurar cómo va a trabajar este componente
			  --------> definimos varias propiedades:
			  --------> selector: cómo vamos a incluirlo dentro del código
			  --------> templateUrl: plantilla y styleUrls: css
			  
	selector: 'app-colores',
	templateUrl: './colores.component.html',
	styleUrls: ['./colores.component.csss']
}

+Código 3º constructor
Este elemento se ejecuta cuando la aplicación Angular inicializa.
constructor() { }

+Código 4º eventos
Su código se ejecutará cada vez que carguemos el componente y cada vez que entre en memoria
ngOnInit() { }

+Código 5º métodos
Reciben, envíar y procesar información que viene tanto desde la plantilla como información externa.
generarRandom():String {
 ........
}


#3º Plantillas .................................................

+La plantilla es la parte visual de un componete y siempre están relacionados.
generalmente vamos a tener relacionado un componente con una plantilla
que puede ser tanto interna como externa.

+Una plantilla en resumen es HTML al cuál nosotros le podemos inyectar
diferentes datos y propiedades de Angular.

+Las plantillas están controladas desde el componente
y nos permiten enviar, recibir y reaccionar a partir de la información que nos da el componente.

Un poco de código de emplo de una plantilla: 

<p [ngStyle]="{'background':colorHex()}">----------------------> Directivas
	<app-saludo [colorNombre]="colorLocal"></app-saludo>-------> Componentes
</p>
<p>
	Color del componente padre {{colorNombre}} ----------------> Expresiones
</p>


#5º Servicios .................................................
+Básicamente nos permiten insertar datos
+Los servicios permanecen activos durante toda la apliación
+Los servicios pueden comunicarse con otros elementos de la aplicación
 pueden comunicarse con componentes, directivas y con otros servicios.
+Sirven para transportar la información que se encuntra entre los diferentes esqumas.

Esquema
[
SERVICIOS <---> Componente
SERVICIOS <---> Componente
SERVICIOS <---> Directiva
SERVICIOS <---> Servicio
]

Un poco de código de emplo de un componente: 

+Código 1º Imports --> Importamos las funcionalidades que vamos a tener

import {Injectable} from '@angular/core';

+Código 2º Tenemos un elemento que es el que define nuestro componente es el decorador
@Injectable () --------> Decorador

+Código 3º constructor
Este elemento se ejecuta cuando la aplicación Angular inicializa.
constructor() { }

+Código 4º métodos
mostrarLibors():String {
 ........
}

#5º Directivas ..................................................
+Un componente es básicamente una directiva con plantilla
+Y una directiva es un componente sin ella.
+Usualmente las directivas no van a trabajar con plantillas aunque pueden hacerlo.

+Tipo de directivas estructurales que agregan/eliminan elementos

+Tipo de directivas de atributo que cambian la apariencia o comportamiento de elementos

++Un poco de código de emplo de una directiva estructural ngFor: 

<ul>
	<li *ngFor="let libro of libros">
		<a (click)="agregarLibro(libro)"/></a> -----> directiva estructural
	</li>
</ul>

esta directiva estructural va a cambiar el HTML que se encuentra dentro de ella.

++Un poco de código de emplo de una directiva de atributo ngStyle: 
la directiva de atributo ngStyle va a modificar las propiedades de un párrafo
por las información de los parámetros que tengo definidos, modificando el color de fondo.

<p [ngStyle]="{'background':colorHex()}">  ---------> directiva de atributo
	<app-saludo [colorNombre]="colorLocal"></app-saludo>
</p>
<p>
	Color del componente padre {{colorNombre}}
</p>

++Un ejemplo de definición de Directiva podría ser:

import { Directive } from '@angular/core';

@Directive({ ---------------------------------> Decorador
	selector: '[appMiDirectiva]' -------------> Metadatos
})
export class MiDirectivaDirective {

	constructor() {} -------------------------> Constructor
}

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
Archivos y recursos para el curso

Proyecto disponible en:
https://github.com/LinkedInLearning/Angular-esencial-2841344

1º Instalar: Visual Studio Code
2º Instalar: Node.js
3º Instalar: Typescript (npm install -g typescript) 
4º Probar: tsc -v, para visualizar la versión de Typescript
5º Instalar la Línea de Comandos de Angular CLI: npm install -g @angular/cli
 
$ ng version  	 ----> Muestra la versión de Angular instalada
$ ng new prueba2 ----> Crear una aplicación desde cero
$ ng generate <elemento> <nombre>
$ ng generate component micomponente -------> Genera un nuevo componente

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
Inicialización y elementos de un proyecto Angular

+En esta sección se describen muy por encima algunos de los ficheros
 comunes en una aplicación Ángular, así como su funcionalidad.

+Generalmente las aplicaciones Angular que se distribuyen no contienen
 la carpeta: node_modules
 esta carpeta contiene las dependencias de los módulos que estamos utilizando.

+El fichero: package.json 
 contiene entre otros las dependencias de los módulos que estamos utilizando.

+Ejemplo:
"dependencies": {
 "@angular/cores":"<version>",
 "@angular/cli":"<version>",
 ... ...
 
+Si el proyecto no contiene la carpeta: node_modules
 para resetablecer la carpeta así como las dependencias
 ejecutar: 
 > $ npm install
 

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
Sintaxis estricta, inicialización de variables y tipado

+Forzar la sintaxis más estricta de Typescript

Estoy en: app.component.ts
... ... ...
export class AppComponet {
	title = 'test1';
	-- Inicializo una variable ---1ª forma------Inicializar con valor en el constructor.
	miVar:number;
	constructor(){
		this.miVar=0;
	}
	-- Inicializo una variable ---2ª forma------Inicializar con valor en la variable.
	miVar = 0;
	-- Inicializo una variable ---3ª forma------Variable personalizada.
	----En src> app> common> types.ts ----> defino la variable
	export interface Libro {
		id:number,
		titulo:string,
		autor?:string,
		descripcion?:string
	}
	---Y ahora la utilizamos y la inicializamos:
	miLibro: Libro;
	constructor(){
		this.miLibro = {
			id:1,
			titulo:'xxx'
		}
	}
	---O también, para que sea un array:
	misLibros: Libro[];
	constructor(){
		this.misLibros = [
			{
			id:1,
			titulo:'xxx'
			}
		]
	}
	
}


@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
Componentes de Angular

#1º Anatomía de un componente

+Creación de un componente desde la terminal
$ ng generate component aleatorio

src>app>aleatorio (encapsulado a nivel de componente)
+aleatorio.component.css ------>Parte visual, estilos
+aleatorio.component.html ----->Parte visual, html
+aleatorio.component.spec.ts -->Pruebas para el componente
+aleatorio.component.ts ------->Código fuente del componente

En: aleatorio.component.ts tenemos:

import { Component, OnInit } from '@angular/core';

@Component({
  selector: 'app-aleatorio',
  templateUrl: './aleatorio.component.html',
  styleUrls: ['./aleatorio.component.css']
})
export class AleatorioComponent {
	// Incluimos también
	aleatorio:number = Math.floor(Math.random()*100);
	constructor(){}
	ngOnInit(){}
}

#Hemos creado el componente pero con esto no se mostrará en la aplicación

En el index.html tenemos:
<body>
	------>Incluye el módulo inicial de nuestra aplicación dentro del archivo index.html
	------>Aquí comienza nuestra aplicación
	<app-root>Loading...</app-root>
</body>

#Vamos a buscar ese componente inicial en: app.component.ts

import { Component } from '@angular/core';

@Component({
  selector: 'app-root',
  templateUrl: './app.component.html',
  styleUrls: ['./app.component.css']
})
export class AppComponent {
  title = 'Hola Mundo!';
}

#Y en la plantilla del componente incial: app.component.html, tenemos:
<h1>{{ title }}</h1> ---> Muestra Hola Mundo!

#Añadimos en la plantilla de nuestro componente inicial 
 la llamada a nuestro nuevo componente aleatorio
 @Component({
  selector: 'app-aleatorio', 
 
Así que añadimos en el HTML la etiqueta:
<app-aleatorio></app-aleatorio>


@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
Métodos, propiedades y plantillas

... ... ...




