
Apuntes-Angular. Curso Angular Esencial (LinkedinLearning) (2023)

¿Qué es Angular? *********************************

+ Una plataforma basada en Javascript
+ Puede ejecutarse en móviles, servidores y navegadores
+ Alto rendimiento pensada para ejecutarse en dispositivos móviles (Mobile first)
+ Código abierto, apoyado por Google (Javascript) y Microsoft (Typescript)


@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
¿Cómo funciona? **********************************


+Punto de entrada: Módulo principal
->Componente(s) : Tiempo de vida en función de tiempo de uso
-->Componente (encapsulado)
-->Componente (encapsulado)
->Servicios: Permiten la comunicación entre componentes y la aplicación
-- Vivos a lo largo de toda la aplicación / En memoria

Una vez definidos los componentes, tenemos:

#1º Código fuente: Conjunto de archivos en javascript, typescript, html, css
con los que desarrollamos nuestra aplicación
Esto una vez que se cargue dentro de un navegador va a cambiar cuando Angular se ejecute

#2º Angular: Cuando Angular entre por primera vez tomará todo el código y lo va a reescribir
en algunos casos simplemente añadirá algunos atributos extra dentro del HTML
en otros casos va reescribirlo por completo dependiendo de nuestro código
y de la funcionalidad que hayamos definido.

#3ºApp: Este producto que va a salir a partir del proceso o render de Angular
va a ser lo que nosotros vamos a llamar la aplicación

La aplicación va a interactuar con el código que hemos desarrollado en Typescript
a través de diferentes elementos como:
+Eventos
+Bindings/modelos

Así cuando el usuario modifique la información por ejemplo rellenando un formulario
o elementos que se encuentran dentro de la aplicación
podemos también modificar la información que se encuentre ahí
y a partir de esa modificación enviar a Angular que va a responder con un proceso

que puede ser enviar al usuario a otra pantalla, modificar los datos presentados, 
o simplemente realizar una compra.

#4º Eventos: También vamos a tener los eventos que van a ser a partir del teclado, 
movil, interación para responder a las interacciones.


@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
Partes de una app Angular

#1º Módulos .................................................

Punto de entrada de nuestra aplicación, 
lo primero que se carga al ejecutar una aplicación Angular

+Toda apliación contiene al menos un módulo principal

+Agrupa diferentes funcionalidades de la apliación:
Si utilizamos librerías internas, librerías externas, 
estamos definiendo los componentes de nuestra apliación,
las rutas, los servicios, todos los elementos con los que vamos a trabajar
se van a cargar en este componente principal.
Y nos va a definir cómo va a trabajar nuestra aplicación y con qué va a comenzar a trabajar.

Un poco de código de emplo de un módulo: app.module.ts

+Código 1º Imports
import {BrowseModule} from '@angular/plataform-browser';
... ...

+Código 2º Tenemos un elemento que es el que define nuestro módulo es el decorador
@NgModule ({ --------> Decorador
así es como vamos a declarar que el código que estamos utilizando es un módulo

+Código 3º declarations
declarations: [ -----> Definimos los distintos componentes con los que estamos trabajando
	AppComponent
]

+Código 4º imports
imports: [ 	----------> Imports o módulos importados con los que estamos trabajano
			----------> y van a estar disponibles en nuestra aplicación para trabajar con los componentes
			----------> podemos incluir módulos de Angular y módulos externos
	BrowseModule, FormsModule, HttpModule
], 

+Código 5º providers
providers: [] --------> Servicios con los que vamos a trabajar en nuestra aplicación
			  --------> y que se van a mantener disponibles durante toda la vida útil de nuestra apliación
			  --------> almacenando y transporando datos.
+Código 6º bootstrap
bootstrap: [AppComponent]


#2º Componentes .................................................
El componente es el bloque central de construcción de una aplicación
todos los elementos que tengamos de interacción o de contenido dentro de una apliación Angular
se va a contener dentro de un componente.

+ Son los bloques o ladrillos de construcción de una apliación
+ Los componentes pueden estar anidados entre sí
  Podemos tener múltiples componentes dentro de una pantalla
  y a su vez tener múltiples componentes dentro de un componente.
+ El componente tiene un tiempo de vida útil de hecho tiene un ciclo de vida.
+ El componete se va a cargar cuando nosotros empecemos a utilizarlo
  y dependiendo de la arquitectura puede invocar a otros componentes.
+ Cuando dejamos de utilizar un componente se elemina de la memoria
+ Cada componente trabaja por separado y podemos tener componentes dentro de otros componentes
  los componentes siempre va a estar encapsulados
  y pueden comunicarse entre sí a través de inputs, outputs y servicios

Un poco de código de emplo de un componente: 

+Código 1º Imports --> Importamos las funcionalidades que vamos a tener

import {Component, OnInit} from '@angular/core';

+Código 2º Tenemos un elemento que es el que define nuestro componente es el decorador
@Component ({ --------> Decorador
			  --------> así es como vamos a declarar que el código que estamos utilizando es un componente
			  --------> incluye el concepto de Typescript de Metadatos
			  --------> que nos permite configurar cómo va a trabajar este componente
			  --------> definimos varias propiedades:
			  --------> selector: cómo vamos a incluirlo dentro del código
			  --------> templateUrl: plantilla y styleUrls: css
			  
	selector: 'app-colores',
	templateUrl: './colores.component.html',
	styleUrls: ['./colores.component.csss']
}

+Código 3º constructor
Este elemento se ejecuta cuando la aplicación Angular inicializa.
constructor() { }

+Código 4º eventos
Su código se ejecutará cada vez que carguemos el componente y cada vez que entre en memoria
ngOnInit() { }

+Código 5º métodos
Reciben, envíar y procesar información que viene tanto desde la plantilla como información externa.
generarRandom():String {
 ........
}


#3º Plantillas .................................................

+La plantilla es la parte visual de un componete y siempre están relacionados.
generalmente vamos a tener relacionado un componente con una plantilla
que puede ser tanto interna como externa.

+Una plantilla en resumen es HTML al cuál nosotros le podemos inyectar
diferentes datos y propiedades de Angular.

+Las plantillas están controladas desde el componente
y nos permiten enviar, recibir y reaccionar a partir de la información que nos da el componente.

Un poco de código de emplo de una plantilla: 

<p [ngStyle]="{'background':colorHex()}">----------------------> Directivas
	<app-saludo [colorNombre]="colorLocal"></app-saludo>-------> Componentes
</p>
<p>
	Color del componente padre {{colorNombre}} ----------------> Expresiones
</p>


#5º Servicios .................................................
+Básicamente nos permiten insertar datos
+Los servicios permanecen activos durante toda la apliación
+Los servicios pueden comunicarse con otros elementos de la aplicación
 pueden comunicarse con componentes, directivas y con otros servicios.
+Sirven para transportar la información que se encuntra entre los diferentes esqumas.

Esquema
[
SERVICIOS <---> Componente
SERVICIOS <---> Componente
SERVICIOS <---> Directiva
SERVICIOS <---> Servicio
]

Un poco de código de emplo de un componente: 

+Código 1º Imports --> Importamos las funcionalidades que vamos a tener

import {Injectable} from '@angular/core';

+Código 2º Tenemos un elemento que es el que define nuestro componente es el decorador
@Injectable () --------> Decorador

+Código 3º constructor
Este elemento se ejecuta cuando la aplicación Angular inicializa.
constructor() { }

+Código 4º métodos
mostrarLibors():String {
 ........
}

#5º Directivas ..................................................
+Un componente es básicamente una directiva con plantilla
+Y una directiva es un componente sin ella.
+Usualmente las directivas no van a trabajar con plantillas aunque pueden hacerlo.

+Tipo de directivas estructurales que agregan/eliminan elementos

+Tipo de directivas de atributo que cambian la apariencia o comportamiento de elementos

++Un poco de código de emplo de una directiva estructural ngFor: 

<ul>
	<li *ngFor="let libro of libros">
		<a (click)="agregarLibro(libro)"/></a> -----> directiva estructural
	</li>
</ul>

esta directiva estructural va a cambiar el HTML que se encuentra dentro de ella.

++Un poco de código de emplo de una directiva de atributo ngStyle: 
la directiva de atributo ngStyle va a modificar las propiedades de un párrafo
por las información de los parámetros que tengo definidos, modificando el color de fondo.

<p [ngStyle]="{'background':colorHex()}">  ---------> directiva de atributo
	<app-saludo [colorNombre]="colorLocal"></app-saludo>
</p>
<p>
	Color del componente padre {{colorNombre}}
</p>

++Un ejemplo de definición de Directiva podría ser:

import { Directive } from '@angular/core';

@Directive({ ---------------------------------> Decorador
	selector: '[appMiDirectiva]' -------------> Metadatos
})
export class MiDirectivaDirective {

	constructor() {} -------------------------> Constructor
}

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
Archivos y recursos para el curso

Proyecto disponible en:
https://github.com/LinkedInLearning/Angular-esencial-2841344

1º Instalar: Visual Studio Code
2º Instalar: Node.js
3º Instalar: Typescript (npm install -g typescript) 
4º Probar: tsc -v, para visualizar la versión de Typescript
5º Instalar la Línea de Comandos de Angular CLI: npm install -g @angular/cli
 
$ ng version  	 ----> Muestra la versión de Angular instalada
$ ng new prueba2 ----> Crear una aplicación desde cero
$ ng generate <elemento> <nombre>
$ ng generate component micomponente -------> Genera un nuevo componente

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
Inicialización y elementos de un proyecto Angular

+En esta sección se describen muy por encima algunos de los ficheros
 comunes en una aplicación Ángular, así como su funcionalidad.

+Generalmente las aplicaciones Angular que se distribuyen no contienen
 la carpeta: node_modules
 esta carpeta contiene las dependencias de los módulos que estamos utilizando.

+El fichero: package.json 
 contiene entre otros las dependencias de los módulos que estamos utilizando.

+Ejemplo:
"dependencies": {
 "@angular/cores":"<version>",
 "@angular/cli":"<version>",
 ... ...
 
+Si el proyecto no contiene la carpeta: node_modules
 para resetablecer la carpeta así como las dependencias
 ejecutar: 
 > $ npm install
 

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
Sintaxis estricta, inicialización de variables y tipado

+Forzar la sintaxis más estricta de Typescript

Estoy en: app.component.ts
... ... ...
export class AppComponet {
	title = 'test1';
	-- Inicializo una variable ---1ª forma------Inicializar con valor en el constructor.
	miVar:number;
	constructor(){
		this.miVar=0;
	}
	-- Inicializo una variable ---2ª forma------Inicializar con valor en la variable.
	miVar = 0;
	-- Inicializo una variable ---3ª forma------Variable personalizada.
	----En src> app> common> types.ts ----> defino la variable
	export interface Libro {
		id:number,
		titulo:string,
		autor?:string,
		descripcion?:string
	}
	---Y ahora la utilizamos y la inicializamos:
	miLibro: Libro;
	constructor(){
		this.miLibro = {
			id:1,
			titulo:'xxx'
		}
	}
	---O también, para que sea un array:
	misLibros: Libro[];
	constructor(){
		this.misLibros = [
			{
			id:1,
			titulo:'xxx'
			}
		]
	}
	
}


@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
Componentes de Angular

#1º Anatomía de un componente

+Creación de un componente desde la terminal
$ ng generate component aleatorio

src>app>aleatorio (encapsulado a nivel de componente)
+aleatorio.component.css ------>Parte visual, estilos
+aleatorio.component.html ----->Parte visual, html
+aleatorio.component.spec.ts -->Pruebas para el componente
+aleatorio.component.ts ------->Código fuente del componente

En: aleatorio.component.ts tenemos:

import { Component, OnInit } from '@angular/core';

@Component({
  selector: 'app-aleatorio',
  templateUrl: './aleatorio.component.html',
  styleUrls: ['./aleatorio.component.css']
})
export class AleatorioComponent {
	// Incluimos también
	aleatorio:number = Math.floor(Math.random()*100);
	constructor(){}
	ngOnInit(){}
}

#Hemos creado el componente pero con esto no se mostrará en la aplicación

En el index.html tenemos:
<body>
	------>Incluye el módulo inicial de nuestra aplicación dentro del archivo index.html
	------>Aquí comienza nuestra aplicación
	<app-root>Loading...</app-root>
</body>

#Vamos a buscar ese componente inicial en: app.component.ts

import { Component } from '@angular/core';

@Component({
  selector: 'app-root',
  templateUrl: './app.component.html',
  styleUrls: ['./app.component.css']
})
export class AppComponent {
  title = 'Hola Mundo!';
}

#Y en la plantilla del componente incial: app.component.html, tenemos:
<h1>{{ title }}</h1> ---> Muestra Hola Mundo!

#Añadimos en la plantilla de nuestro componente inicial 
 la llamada a nuestro nuevo componente aleatorio
 @Component({
  selector: 'app-aleatorio', 
 
Así que añadimos en el HTML la etiqueta:
<app-aleatorio></app-aleatorio>

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
Métodos, propiedades y plantillas

import { Component } from '@angular/core';

@Component({
  selector: 'app-root',
  templateUrl: './app.component.html',
  styleUrls: ['./app.component.css']
})
export class AppComponent {
  title = 'Hola Mundo!!!';
  color:String = 'red';
}

#1º Para utilizar la variable en la plantilla './app.component.html'
utilizamos la sintaxis, de doble llaves: {{title}}

#2º Utilizando la directiva: ngStyle
<h1 [ngStyle]="{'background':'color'}"> ------> Utilizamos la directiva [ngStyle]
	{{title}}							------> para inyectar el valor de la variable: 'color'
</h1>									------> se transforma en: style='background:red'

#3º Incluimos métodos en la clase:

export class AppComponent {
  title = 'Hola Mundo!!!';
  color:String = 'red';
  
  generarRandom():String {
	return Math.floor(Math.random()*255).toString(16); ---> devuelve número hexadecimal
  }
  colorHex():String {
	return "#"+this.generarRandom()+this.generarRandom()+this.generarRandom();
  }
}

Y ahora modificamos el template para utilizar estos datos
<h1 [ngStyle]="{'background':colorHex()}">  ------> Utilizamos la directiva [ngStyle]
	{{title}}								------> para inyectar el valor para el estilo que calcula el método
</h1>										------> se transforma en: style='background: rgb(206,41,97);"


@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
Anidar componentes
+ Creamos un componente colores que anidaremos en el componente principal
$ ng generate component colores

#Y en la plantilla del componente incial: app.component.html, tendremos algo similar a:
<h1>{{ title }}</h1>
<app-colores></app-colores>

+También crearemos un componente saludo:
$ ng generate componet saludo
que anidaremos dentro del componente colores anterior:

#Así tendremos en la plantilla algo similar a:
<h1 [ngStyle]="{'background':'colorHex()'}">
	colores aleatorios
	<app-saludo></app-saludo>
</h1>

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
Enviar datos a un componente con @Input

+Vamos a aprender a comunicar los componentes entre sí
En la sección anterior creamos dos componentes:
colores ------> componente principal
y saludos ----> componente secundario y anidado
y que de momento ambos componenteses están completamente encapsulados
y trabajan de manera individual

+Vamos a hacer que del componente principal podamos enviar información
 al componente anidado:

+#1º Cambiamos en el componente principal: colores.component.ts

export class ColoresComponent {
  colorLocal:String;
  
  generarRandom():String {
	return Math.floor(Math.random()*255).toString(16); ---> devuelve número hexadecimal
  }
  colorHex():String {
	this.colorLocal = "#"+this.generarRandom()+this.generarRandom()+this.generarRandom();
	return this.colorLocal;
  }
}

+#Y ahora cambiaríamos la sintasis en la definición de la plantilla: colores.component.html
De momento empezamos con un ejemplo de cambio estático para verlo funcionar:

<h1 [ngStyle]="{'background':'colorHex()'}">
	<app-saludo [colorNombre]="'XXX'"></app-saludo> --->Inyectamos la propiedad y el valor en el componente
</h1>

+#Y ahora hay que modificar el componente secundario y anidado: saludo.component.ts
+#Añadir el módulo: Input al import

import { Component, OnInit, Input } from '@angular/core';

export class SaludoComponent implements OnInit {

	// Definimos la propiedad que estamos recibiendo con la siguientes sintaxis:
	@Input() colorNombre:String;

+#Y ahora lo desplegamos en la plantilla como si fuese una variable local
en saludo.component.html y escribimos:
<p>Color del componente pade {{colorNombre}}</p>

+#Ahora para que funcione como habíamos pensado, cambiamos de nuevo
el código de la plantilla del componente padre para que le pase al componente hijo información:

<h1 [ngStyle]="{'background':'colorHex()'}">
	<app-saludo [colorNombre]="colorLocal"></app-saludo> --->Inyectamos la propiedad y el valor en el componente
</h1>

Y ahora en la salida en pantalla tenemos algo parecido a:

app works! ---> del componente padre
#e6fa5 -------> colores recuperados en el componente padre
				y pasados para que se pinten en el componente hijo
#fed37
... ... ...


@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
4. Directivas de uso común
+Desplegar u ocultar secciones con la directiva ngIf
----------------------------------------------------

#Ejemplo1 en el app.component.html:

<div id="contenedor">
	<div *ngIf="valor1">
		texto a mostrar si valor1 es true, por defecto será null.
	</div>
</div>

<button (click)="valor1=true">Texto 1</button>--->Añadimos un listener al botón
											  --->para que inyecte el valor true en la variable valor1

<p>Valor1: {{valor1}}</p>---> Con esta línea nos permite ver que valor tiene valor1.

#Ejemplo2 en el app.component.html:

<div id="contenedor">
	<div *ngIf="valor2">
		texto a mostrar si valor2 es true, por defecto será null.
	</div>
</div>

<button (click)="valor2=!valor2">Texto 2</button>--->Añadimos un listener al botón
												 --->para que inyecte el valor contrario de valor2en la variable valor2

<p>Valor2: {{valor2}}</p>---> Con esta línea nos permite ver que valor tiene valor2.


@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
4. Directivas de uso común
+Directiva ngIf con el operador ELSE
------------------------------------

Nota: Cuando estamos trabajando con una directiva dentro de Angular
el alcance que va a tener esta directiva va a ser dentro de la etiqueta en la que se encuentra.

#Ejemplo3 en el app.component.html:

<div id="contenedor">
	<div *ngIf="valor3 ; else otroTexto">
		texto a mostrar si valor3 es true, por defecto será null.
		en caso de que no sea true se mostrará el contenido de la variable otroTexto.
		Definimos con <ng-template #otroTexto> la plantilla de texto que deberá ser mostrada.
	</div>
</div>
<ng-template #otroTexto>
	Otro texto, que se mostrará si valor3 no es true.
</ng-template>

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
4. Directivas de uso común
+Ocultar elementos del DOM con ngContainer
------------------------------------------

#Habíamos dicho que la directiva ngIf debe ir siempre contenida en una etiqueta.
Y la añadimos a la etiqueta div. Esto es: <div *ngIf="valor3 ; else otroTexto">
El problema es que a veces al evaluar la condición se genera un div vacío
que realemente no debería afectar a nada pero el problema surge cuando hay hojas de estilo
a las que si que afecta un div div { ... } y obtenemos un efecto indeseado.

Para solventar este problema, Angular nos provee de una etiqueta especial:
<ng-container *ngIf="valor3 ; else otroTexto">
	texto a mostrar si valor3 es true
</ng-container>

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
4. Directivas de uso común
+Mostrar opciones múltiples con ngSwitch y ngModel
--------------------------------------------------

Incluimos el siguiente código en un template, por ejemplo: app.component.html
<h1>Organizador de tareas</h1>
<div [ngSwitch]="diasSemana">--------------------------->directiva: ngSwitch y le asignamos la expresión a evaluar
	<p class="item" *ngSwitchCase="'lunes'">Hoy es lunes</p>
	<p class="item" *ngSwitchCase="'martes'">Hoy es martes</p>
	<p class="item" *ngSwitchCase="'miércoles'">Hoy es miércoles</p>
	<p class="item" *ngSwitchCase="'jueves'">Hoy es jueves</p>
	<p class="item" *ngSwitchCase="'viernes'">Hoy es viernes</p>
	<p *ngSwitchCase="13">------ 13 -------</p>
	<p *ngSwitchDefault>Elija un día de la semana</p>
</div>
<input type="text" [(ngModel)]="diasSemana"/>----------->directiva: ngModel, aplicado a un input 
											 ---------->conexión en tiempo real de lo que escriba el usuario en el input text
											 ---------->con el valor que corresponda en el ngSwitch diasSemana
											 


@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
4. Directivas de uso común
+Controlar estilos con ngStyle y ngClass
--------------------------------------------------

Incluimos el siguiente código en un template, por ejemplo: app.component.html
<h1>Estilos</h1>
Ejemplo, color fijo:
<div class="cuadrado" [ngStyle]="{'background':'yellow'}"></div> --->Inyecta directamente estilos en un elemento de HTML
Otro Ejemplo, si la variable color tiene valor se le asigna el valor asignado y sino se le aplica el color 'blue':
<div class="cuadrado" [ngStyle]="{'background':color ? color : 'blue'}"></div> --->Inyecta directamente estilos en un elemento de HTML

<button (click)="color='red'">Rojo</button>
<button (click)="color='green'">Verde</button>

-------------------------------------------------------------------

Vamos a ver la directiva: ngClass, que en lugar en inyectar estilos como ngStyle, inyecta una clase

<button (click)="color='green'" [ngClass]="color">Verde</button>------>Inyecta una clase: class="red" o class="verde" al botón																			
																------>dependiendo del valor de la variable color

-------------------------------------------------------------------
Otro ejemplo:


<button (click)="color='red'" [ngClass]="{'activo':color=='red'}">Rojo</button>
																------>Asignará al botón la clase definida en un css 'activo'
																------>si se cumple la condición color=='red'
<button (click)="color='green'" [ngClass]="color">Verde</button>


@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
5. Desplegar información en listas
+Desplegar listas con ngFor
--------------------------------------------------

#Incluimos el siguiente código en el componente, por ejemplo: app.component.ts

import { Component } from '@angular/core';

@Component({
  selector: 'app-root',
  templateUrl: './app.component.html',
  styleUrls: ['./app.component.css']
})
export class AppComponent {
  
  libros:Array<Object>;
  
  constructor() {
	this.libros = [ "uno", "dos", "tres" ];
  }

}

#Incluimos el siguiente código en un template, por ejemplo: app.component.html

<ul>
	<li *ngFor="let libro of libros">------>Vamos a iterar sobre los elementos del array Libros.
		{{libro}}  -------------------->Mostrara una lista con los tres elementos.
	</li>
</ul>

-------------------------------------------------------
Otro ejemplo:

#Incluimos el siguiente código en el componente, por ejemplo: app.component.ts

export class AppComponent {
  
  libros:Array<Object>;
  
  constructor() {
	this.libros = [ 
		{ id:'1', titulo:'Mi libro número uno',  autor:'El uno' },
		{ id:'2', titulo:'Mi libro número dos',  autor:'El dos' },
		{ id:'3', titulo:'Mi libro número tres', autor:'El tres' },
	];
  }

}

#Incluimos el siguiente código en un template, por ejemplo: app.component.html

<ul>
	<li *ngFor="let libro of libros">------>Vamos a iterar sobre los elementos del array Libros.
		{{libro.titulo}}  ----------------->Mostrara una lista con los tres elementos, imprime el título
	</li>
</ul>


@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
5. Desplegar información en listas
+Utilizar operadores adicionales en ngFor
--------------------------------------------------

<ul>
	<li *ngFor="let libro of libros; index as indice">------>La variable index está proporcionada por ngFor
		({{indice}}) {{libro.titulo}}  ------------------->Ahora puedo utilizar la variable indice, que comienza en cero.
	</li>
</ul>

--- Otro ejemplo: -------------------------------------

<ul>
	<li *ngFor="let libro of libros; index as indice">------>La variable index es un elemento que se encuentra en ngFor
		({{indice}}) {{libro.titulo}}  --------------------->Ahora puedo utilizar la variable indice, que comienza en cero.
		<span *ngIf="indice == 5">Destacado</span>---------->Seleccionar el 5
	</li>
</ul>

--- Otro ejemplo: -------------------------------------

<ul>
	<li *ngFor="let libro of libros; index as indice; first as esPrimero ; last as esUltimo">
						------>La variable first es un elemento que se encuentra en ngFor
					   	------>La variable last es un elemento que se encuentra en ngFor
		({{indice}}) {{libro.titulo}}
		<span *ngIf="esPrimero">Destacado</span>------------>first es un booleano, evaluamos su valor
		<span *ngIf="esUltimo"> Destacado</span>------------>last es un booleano, evaluamos su valor
	</li>
</ul>

--- Otro ejemplo: -------------------------------------

<ul>
	<li *ngFor="let libro of libros; odd as esPar; even as esImpar ">
						------>La variable odd  es un elemento que se encuentra en ngFor
						------>La variable even es un elemento que se encuentra en ngFor
		({{indice}}) {{libro.titulo}} 
		<span *ngIf="esPar"> ( es par ) </span>-------------->esPar es un booleano, evaluamos su valor
		<span *ngIf="esImpar"> (es impar) </span>------------>esImpar es un booleano, evaluamos su valor
	</li>
</ul>

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
5. Desplegar información en listas
+Incluir eventos y enlaces en una lista ngFor
--------------------------------------------------

<ul>
	<li *ngFor="let libro of libros ">
		<a href="https://google.com">{{libro.titulo}}</a>---------------------->genera listado de enlaces iguales
		<a href="https://google.com/#g={{libro.autor}}">{{libro.titulo}}</a>--->genera listado de enlaces para buscar el autor
	</li>
</ul>

--- Otro ejemplo: -------------------------------------

<ul>
	<li *ngFor="let libro of libros ">
		<a (click)="mostrarAutor(libro)">{{libro.titulo}}</a>------------->genera listado de enlaces iguales
	</li>
</ul>

#Incluimos el siguiente código en el componente, por ejemplo: app.component.ts

export class AppComponent {

	construtor() { }
	
	mostrarAutor(libro_) {
		alert(`${libro_.titulo} fue escrito por ${libro_.autor}`);
	}
	
}

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
6. Navegación con router de Angular
+Fundamentos del enrutado en Angular
--------------------------------------------------

En la creación del proyecto: ng new navegacion-basica
?Would you like to add Angular routing? (y/N)

También le creamos un nuevo componente al proyecto:
$ ng generate component segundo-componente

import { Component } from '@angular/core';

@Component({
  selector: 'app-segundo-componente',
  templateUrl: './segundo-componente.component.html',
  styleUrls: ['./segundo-componente.component.css']
})
export class SegundoComponenteComponent {

}

-----------------------------------------------------------------
Con la opción del Routing:

+Nos crea el archivo más importante para gestionar las rutas

src > app > app-routing.module.ts

import { NgModule } from '@angular/core';
import { RouterModule, Routes } from '@angular/router';

const routes: Routes = [];

@NgModule({
  imports: [RouterModule.forRoot(routes)],
  exports: [RouterModule]
})
export class AppRoutingModule { }

-----------------------------------------------------------------

#1º Añadimos el array routes, las rutas que necesitamos

import { SegundoComponenteComponent } from './segundo-componente/segundo-componente.component';

const routes: Routes = [
	{ path:'segundo', component:SegundoComponenteComponent }, 
	----> Cada ruta será un Objeto, con parámetros:
	----> path: es la ruta, en este caso 'segundo' es un componente creado (ng generate component segundo-componente)
	----> component: es la clase del componente 'segundo' es SegundoComponenteComponent
];

-----------------------------------------------------------------

#2º Nos aseguramos que en nuestra aplicación en

src > app > app.component.html 

tenemos un nodo o una etiqueta llamada: 
<router-outlet></router-outlet>

Aquí es donde se va a mostrar el contenido de nuestra aplicación
todo lo que está alrededor de:
<router-outlet></router-outlet>
va a mantenerse estático.

Pero dentro de esta etiqueta va a mostrarse el componente que hemos definido
en esta sección:
const routes: Routes = [
	{ path:'segundo', component:SegundoComponenteComponent }, 
];

Dentro de la sección 
<router-outlet></router-outlet>
va a mostrarse el contenido del componente SegundoComponenteComponent

Ejemplo:
<h1>Mi aplicación Navegación Básica</h1>

<router-outlet></router-outlet>

-----------------------------------------------------------------

#3º Desplegamos con:
$ ng serve -o 

http://localhost:4200
Y por defecto se muestra en la pantalla

Mi aplicación Navegación Básica

Para que se muestre en la etiqueta
<router-outlet></router-outlet>
el contenido de la plantilla del componete segundo
tendremos que escribir en al url de la pantalla:

http://localhost:4200/segundo
Y ahora se muestra:

Mi aplicación Navegación Básica
segundo-componente works!


@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
6. Navegación con router de Angular
+Integrar múltiples componentes con enrutado
--------------------------------------------------

En esta lección vamos a aprender
cómo integrar una aplicación Angular 
para que pueda utilizar diferentes componentes a través de enrutado.


#1º Confirmar que : app.module.ts tiene: 

import { AppRoutingModule } from './app-routing.module';

Y que tengamos también en los imports: AppRoutingModule

@NgModule ({
	declarations: [...],
	imports: [
		...
		AppRoutingModule,
		...

#2º Tenemos el fichero:

src > app > app-routing.module.ts

import { NgModule } from '@angular/core';
import { RouterModule, Routes } from '@angular/router';

const routes: Routes = [];

@NgModule({
  imports: [RouterModule.forRoot(routes)],
  exports: [RouterModule]
})
export class AppRoutingModule { }

#3º Añadirmos las rutas al array routes

const routes: Routes = [
	{ path:'lista-libros', component:ListaDeLibrosComponent }, 
	{ path:'acerca-de', component:AcercaDeComponent }, 
];


#4º Comprobamos que tenemos en el fichero:

src > app > app.component.html 

tenemos un nodo o una etiqueta llamada: 
<router-outlet></router-outlet>

Y si no la tenemos la añadimos.

#5º En la página añado también un componente alrededor del enrutado:

<app-encabezado></app-encabezado>
<router-outlet></router-outlet>

Esto significa que en nuestra aplicación habrá un encabezado que va a estar
permanentemente visible sin importar la ruta
<app-encabezado></app-encabezado>

Pero después de él vamos a tener un contenido que va a estar variando
dependiendo de la ruta que nosotros hemos definido en: app-routing.module.ts

#6 Se mostrará una cabecera fija
y el contenido inferior irá cambiando navegando manualmente
introduciendo en la url del navegador las urls definidas en el routing

http://localhost:4200/lista-libros --> Mostrará un listado de libros
http://localhost:4200/acerca-de -----> Mostrará un texto describiendo la sección acerca de...


@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
6. Navegación con router de Angular
+Desplegar rutas por defecto
--------------------------------------------------

Aprenderemos a instalar y configurar las rutas por defecto.

Teníamos definidas dos rutas:
http://localhost:4200/lista-libros --> Mostrará un listado de libros
http://localhost:4200/acerca-de -----> Mostrará un texto describiendo la sección acerca de...

Pero cuando el usuario entre en la ruta por defecto no ve ningún contenido:
http://localhost:4200

#Añadirmos las rutas al array routes

const routes: Routes = [
	{ path:'lista-libros', component:ListaDeLibrosComponent }, 
	{ path:'acerca-de', component:AcercaDeComponent },

	#1º Ruta por defecto, para cuando entre en la aplicación y le redirige a 'lista-libros'
	{ path:'', pathMatch:'full', redirectTo:'lista-libros' }

	#2º Ruta por defecto para cuando el usuario solicite una ruta no definida en la aplicación y le redirige a 'lista-libros'
	{ path:'**', redirectTo:'acerca-de' } --> Ejemplo: Le redirigimos a la página Acerca de...
	
	#3º Ruta por defecto para cuando el usuario solicite una ruta no definida en la aplicación y le redirige a '404'
	{ path:'404, redirectTo:'Error404Component' } --> Definimos la ruta 404 y mostramos el Componente 404
	{ path:'**', redirectTo:'404' } ----------------> Ejemplo: Le redirigimos a la ruta previamente definida 404
];


@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
6. Navegación con router de Angular
+Navegación interna en una aplicación
--------------------------------------------------

Tenemos en el ejemplo que se describe una cabecera con unos enlaces definidos

<a href="/">Inicio</a>
<a href="/lista-libros">Lista de libros</a>
<a href="/acerca-de">Acerca de</a>

Cuando hacemos clic sobre los enlaces
vemos en el navegador, en la pestaña Network
que cada vez que navegamos a una opción nos estamos bajando
todos los componentes de la aplicación.

Lo ideal para evitar esto es que nosotros pudiésemos hacer algún tipo
de carga asíncrona y justamente eso lo podemos hacer con Angular.


Va a hacer una carga mucho más eficiente y completamente asíncrona

<a [routerLink]="['/lista-libros']">Lista de libros</a>
<a [routerLink]="['/acerca-de']">Acerca de</a>

Ahora sólo se carga el componente dinámico que se está enrutando.


@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
6. Navegación con router de Angular
+Activar rutas dinámicas
--------------------------------------------------

Vamos a aprender como crear rutas dinámicas

#1. Creamos una ruta dinámica de ejemplo:

const routes: Routes = [
	{ path:'lista-libros', component:ListaDeLibrosComponent }, 
	{ path:'acerca-de', component:AcercaDeComponent },
	{ path:'detalles/:libroId', component:DetallesComponent },

#2. En la plantilla de un elemento que muestra un listado de libros tenemos:

<div class="container">
	<ul>
		<li *ngFor="let libro of libros">
			<a [routerLink]="['/detalles']"> {{libro.titulo}} </a>
			------------> Esto lleva a: http//localhost:4200/detalles
			
			<a [routerLink]="['/detalles','misDatos']"> {{libro.titulo}} </a> 
			------------> Esto lleva a: http//localhost:4200/detalles/misDatos
			
			<a [routerLink]="['/detalles', libro.id]"> {{libro.titulo}} </a> 
			------------> Esto lleva a: http//localhost:4200/detalles/5 
			------------> siendo 5 el id de un libro seleccionado de la lista
			
		</li>
	</ul>
</div>

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
6. Navegación con router de Angular
+Leer información de rutas dinámicas
--------------------------------------------------

Queremos leer los valores dinámicos que viajan en la url
para el ejemplo anterior, donde habíamos definido la url como:

const routes: Routes = [
	{ path:'detalles/:libroId', component:DetallesComponent },

Editamos el fichero del componente: detalles\detalles.component.ts
Y añadimos el siguiente código en el constructor que estaba vacío:

#En nuestra clase, ya tenemos definido un array con objetos libro cargados:
this.libros = {
	{id:1, titulo: 'Uno Título', 	autor: 'Uno Autor', 	descripcion: 'Uno Descripción' },
	{id:1, titulo: 'Dos Título', 	autor: 'Dos Autor', 	descripcion: 'Dos Descripción' },
	{id:1, titulo: 'Tres Título', 	autor: 'Tres Autor', 	descripcion: 'Tres Descripción' },
	{id:1, titulo: 'Cuatro Título', autor: 'Cuatro Autor', 	descripcion: 'Cuatro Descripción' },
	.........................................................
}

El módulo ActivateRoute nos va a permitir acceder a la información que está en la url.

#Nos aseguramos que está correctamente importado
import { ActivateRoute } from '@angular/router';

#Buscamos el constructor en la clase del componente y añadimos:
constructor( private ruta:ActivateRoute) { 

#Buscamos en la clase, el evento: ngOnInit()
este evento se va a ejecutar en el momento en el que se inicialice el componente:

#Declaramos una variable con el mismo nombre que el que establecimos en la definición de la ruta dinámica:
# { path:'detalles/:libroId', component:DetallesComponent },

libroId:any; -- Es de tipo any para no complicar el ejemplo.
libroSeleccionado:any;

ngOnInit() {

	this.libroId = this.ruta.snapshot.paramMap.get('libroId');
	this.libroSeleccionado = this.encontrarLibro();
	
}

encontrarLibro() {
	return this.libros.filter((libro)=>libro.id==this.libroId)[0];
}

#Y ahora falta desplegar los detalles en la plantilla
Editamos el fichero de la plantilla del componente que estamos utilizando:
detalles\detalles.component.html
donde de momento estamos escribiendo texto estático y escribimos:

<div class="container">
	<h1>{{libroSeleccionado.titulo}}</h1>
	<h2>por: {{libroSeleccionado.autor}}</h2>
	<p>{{libroSeleccionado.descripcion}}</p>
</div>



@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
7. Compartir datos con los servicios de Angular
+Crear un servicio de Angular
--------------------------------------------------

#Los servicios nos va a servir para comunicar información entre componentes.
Vamos a ver cómo crear e implementar un servicio utilizando la línea de comandos.

#En el componente principal tenemos

src > app > app.component.html 
<app-encabezado></app-encabezado>
<router-outlet></router-outlet>

#cada una de las dos etiquetas está desplegando diferentes componentes
#el servicio nos va a permitir conectar ambos elementos

#Creamos el servicio ejecutando en la línea de comandos
$ ng generate service librosSeleccionados

#Se han creado dos nuevos ficheros en nuestro proyecto
scr > app > librosseleccionados.service.spec.ts
scr > app > librosseleccionados.service.ts

#Una vez generado el servicio en la consola se lee:
WARNING Service is generarted but not provided, it must be provided to be used

Eso significa que aún no se encuentra habilitado dentro de la apliación
vamos a habilitarlo:

#Para ello vamos a: app.module.ts
y añadimos la siguiente línea:

import { LibrosseleccionadosService } from './librosseleccionados.service'; --> Ojo! sin extensión

#y añadimos el servicio también en la sección: providers

providers: [
	LibrosseleccionadosService
],


@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
7. Compartir datos con los servicios de Angular
+Preparación para usar serivicios en Angular
--------------------------------------------------

#Retomamos el ejemplo anterior, con la página que mostraba el listado de libros
http://localhost:4200/lista-libros

#Queremos que cuando se haga clic sobre el enlace de algún libro
se agregue el libro a una lista desplegable

#Editamos la plantilla del componente encabezado, es encabezado.component.html
Y añadimos un botón y un listenera para el evento click.
Cuando hagamos clic haremos que la variable: mostrarLista funcione como un switch.

<button class="... mostrar-libros" (click)="mostrarLista=!mostrarLista"> </button>

#Y debajo tenemos de momento una lista dinámica
que se mostrará en función del valor de la variable mostrarLista
El valor por defecto de mostrarLista es false
y por tanto inicialmente no se mostrará la lista:

<div class"misLibros" *ngIf="mostrarLista">
	<h2>Mis Libros</h2>
	<ul>
		<li>Libro Uno</li>
		<li>Libro Dos</li>
	</ul>
</div>

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
7. Compartir datos con los servicios de Angular
+Conectar un servicio con múltiples componentes
--------------------------------------------------

#En esta lección vamos a conectar dos componentes con un servicio.

#Por un lado tenemos un componente que nos muestra un listado de libros.
#Y otro componente con un encabezado
que nos debería de mostrar una lista con los libros seleccionados en la lista.

#La idea es que el servicio recopile la información con los libros seleccionados
y la almacene para que pueda ser mostrada en el listado de libros de la cabecera.

#1º Nos vamos al fichero del servicio creado anteriormente
scr > app > librosseleccionados.service.ts

@Injectable()
export class LibrosseleccionadosService {

#Definimos un array de libros para guardar los libros seleccionados
libros:Array<Object>;

constructor() { }
	#Inicializamos el array libros vacío
	this.libros = []; 
}

#Se utilizará desde el componente con el listado de libros
#para añadir los libros seleccionados
agregarLibros(_nuevoLibro) { 
	this.libros.push(_nuevoLibro);
}

#Se llamará desde el componente cabecera para mostrar
#el listado de libros seleccionados
mostrarLibros() {
	if(this.libros.length>0) {
		return this.libros;
	} else {
		return false; -- Para ocultar el listado si no hay libros seleccionados
	}
}

#2º Nos vamos a la clase del componente de listado de libros
scr > app > lista-de-libros > lista-de-libros.component.ts

#Copiamos el import del servicio y lo aplicamos al componente y cambiamos la ruta con '..'
import { LibrosseleccionadosService } from '../librosseleccionados.service'; --> Ojo! sin extensión

#Ahora el componente puede inyectar información en mi servicio
#actualmente el constructor de mi componente tenemos
#constructor(private http:Http) {}
#Añadimos:librosseleccionados

constructor(private http:Http, public librosseleccionados:LibrosseleccionadosService) {}

#Implementamos un método:
agregarLibro(_libro) {
	
}

#3º Nos vamos a la plantilla del componente de listado de libros
scr > app > lista-de-libros > lista-de-libros.component.html

#Y agregamos un evento clic, donde se llamará la función implementada
#en la clase y le pasará como parámetro el libro seleccionado.
#(click)="agregarLibro(libro)"

<div class="container">
	<ul>
		<li *ngFor="let libro of libros">
			<a	(click)="agregarLibro(libro)"
				[routerLink]="['/detalles', libro.id]"> {{libro.titulo}} </a> 
		</li>
	</ul>
</div>


#4º Nos vamos a la clase del componente de listado de libros
scr > app > lista-de-libros > lista-de-libros.component.ts

Y continuamos con la implementación del método: agregrarLibro(_libro)

constructor(private http:Http, public librosseleccionados:LibrosseleccionadosService) {}

#Implementamos un método, que llama al método del servicio pasándole como parámetro
#el libro que recibió como parámetro al hacer clic en un libro en la lista de libros
#lista-de-libros.component.html > (click)="agregarLibro(libro)"

agregarLibro(_libro) {
	this.librosseleccionados.agregarLibros(_libro);
}

#5º Nos vamos a la clase del componente encabezado que muestra la lista de libros seleccionados
#y utilizará la información que hemos ido guardando en el servicio.
scr > app > encabezado > encabezado.component.ts

#Copiamos el import del servicio y lo aplicamos al componente y cambiamos la ruta con '..'
import { LibrosseleccionadosService } from '../librosseleccionados.service'; --> Ojo! sin extensión

#Ahora el encabezado también tiene acceso al código y la información de nuestro servicio.
#Añadimos:librosseleccionados al constructor

constructor(public librosseleccionados:LibrosseleccionadosService) {}

#Y ahora la variable: librosseleccionados, se encuentra disponible dentro del componete

#6º Nos vamos a la plantilla del componente encabezado
scr > app > encabezado > encabezado.component.html

<div clas="misLibros" *ngIf="mostrarLista">
	<h2>Mis Libros</h2>
	<ul *ngIf="librosseleccionados.mostrarLibros()">
		<li *ngFor="let libro of librosseleccionados.mostrarLibros()">{{libro.titulo}}</li>
	</ul>
</div>


@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
8. Conectar aplicaciones a datos externos
+Cargar archivos externos en Angular
--------------------------------------------------

#Veremos cómo Angular interaciona con archivos que se encuentran fuera de la aplicación.
#Hasta ahora hemos trabajado con información guardada dentro de nuestra aplicación
#en la clase del componente de listado de libros
scr > app > lista-de-libros > lista-de-libros.component.ts

constructor() {
	this.libros = [
		{id:1, titulo:"Libro uno"...
	]
}

#1º Nos vamos al fichero y añadimos dos librerías:
src > app > app.module.ts

#Esta librería nos permitirá trabajar con toda la configuración http
#y con archivos externos a través del protocolo http
import { HttpClientModule } from '@angular/common/http';

#También tenemos eque imporatar esta librería dentro de la aplicación
@NgModule{(
	... ... ... ...
	imports: [
		HttpClientModule
	]
})

#2º Nuestra intención es eliminar la información local con el listado de libros
#Cuando se crea la aplicación con el Angular CLI $ ng new app
#se crea por defecto una carpeta dentro de nuestro proyecto
#src > app > assets 
#aquí es donde nosotros podemos poner los archivos externos a nuestra apliación
#Para el ejemplo, creamos una carpeta: json y añadimos un fichero: lista-de-libros.json
#src > app > assets > json > lista-de-libros.json
[{
	"id":1,
	"titulo":"Libro uno",
	"autor":"Autor uno",
	"descripcion":"Descripción uno"
},...

#4º Nos vamos a la clase del componente de listado de libros
scr > app > lista-de-libros > lista-de-libros.component.ts

#Y borramos la información estática que habíamos utilizado previamente
constructor() {
	this.libros = [
		{id:1, titulo:"Libro uno"...
	]
}

#Tenemos de nuevo
constructor() { }

#Vamos a necesitar acceder al fichero así que necesitamos importar 
import { HttpClientModule } from '@angular/common/http';

#Añadimos en el constructor una variable de ese tipo HttpClient
#ESTO CREA UNA INYECCIÓN DE DEPENDENCIAS 
#y nos va a permitir que tengamos acceso dentro del componente local
#a todos lo métodos que se encuentran contenidos dentro del HttpClient de Angular 
constructor(private http:HttpClient) {
}

#Implementamos un método que va cargar nuestra lista de libros
#Y también vamos a definir la ruta donde se encuentra el archivo con la información
#esto puede ser también la ruta a una API o cualquier información externa.
#Añadiremos una subscripción, porque lo que nos va a devolver la llamada es un Observable
cargarLista(){
	this.http.get('assets/json/lista.json').subscribe(
		(respuesta)=> { this.libros = respuesta; }
	)
}

#Nos da un pequeño error con el casteo del tipado de la resupesta que teníamos declarada en le array
#como: libros:Libro[];
#porque nosotros no podemos saber el tipo de objeto que vamos a recibir de nuestro archivo Json
#así que no lo podemos tipar aún.
#Simplemente para resolver el error de una forma rápida, lo cambiamos por:
#libros:any;

#Y ahora nos falta llamar al método para que se cargue la lista:
ngOnInit() {
	this.cargarLista();
}

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
8. Conectar aplicaciones a datos externos
+Manejo de errores de conexión HTTP
--------------------------------------------------

#En el caso de que tratando de obtener la información externa algo sale mal
#Simulamos un error, modificando la ruta del documento externo

this.http.get('assets/json/lista.json00000000000').subscribe(

#En la aplicación ya no mostramos ninguna lista de libros recuperada
#Y en la pestaña network del navegador encontramos un error en la llamada
#lista.json00000000000 un Status 404

#Nota: ejecutando este código, en caso de error en la primera llamada
#repetiríamos la llamada de nuevo, obteniendo obviamente el mismo error:
cargarLista(){
	this.http.get('assets/json/lista.json').subscribe(
		(respuesta)=> { this.libros = respuesta; },
		(respuesta)=> { this.libros = respuesta; }
	)
}

#Ahora vamos a cambiar la segunda llamada para que tome acción en caso de error
#Creamos una variable:
errorHttp:boolean = false;

cargarLista(){
	this.http.get('assets/json/lista.json').subscribe(
		(respuesta)=> { this.libros = respuesta; },
		(respuesta)=> { this.errorHttp = true; }
	)
}

#Y ahora nos vamos a la plantilla del componente de listado de libros
scr > app > lista-de-libros > lista-de-libros.component.html

#Y incluimos el siguiente código

<div class="container">
	<ul>
		<li *ngFor="let libro of libros">
			<a	(click)="agregarLibro(libro)"
				[routerLink]="['/detalles', libro.id]"> {{libro.titulo}} </a> 
		</li>
	</ul>
	
	#Incluimos el siguiente código para que se muestre un mensaje de error
	#si falló la carga de nuestro Array en la conexión con el fichero externo
	<div class="alert alert-warning" *ngIf="errorHttp">
		No se puede mostrar la lista.
	</div>
	
</div>

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
8. Conectar aplicaciones a datos externos
+Desplegar diálogos de precarga
--------------------------------------------------

#Cuando trabajamos con ficheros externos no solo tenemos que lidiar con el problema 
#de errores potenciales dentro de la carga de datos
#también tenemos que lidiar con el tiempo que tarda en descargase los datos
#para ser mostrados al usuario

#Así que vamos a ver como utilizar diálogos de precarga
#Como truco para simular una descarga lenta vamos a las herramientas de desarrollo del Navegador
#Pestaña Network -> Opción: No throttling (Sin estrangulamiento)
#Y modificamos su valor seleccionando: Slow 3G
#Así que simulará la carga con una conexión más lenta
#Como desplegar información para orientar al usuario de que se está realizando un carga en nuestra aplicación

#En la clase del componente de listado de libros
scr > app > lista-de-libros > lista-de-libros.component.ts
#Creamos una variable:
cargando:boolean = false;

#Y además incluimos el siguiente código
#Con: this.cargando = true;
#Cambiamos de valor la variable para que se muestre el mensaje.
ngOnInit(){
	this.cargando = true; --Cambiamos de valor la variable!
	this.cargarLista();
}

#Y además incluimos el siguiente código
#Con: this.cargando = false;
#Cambiamos de valor la variable para que ya no se muestre el mensaje.
cargarLista(){
	this.http.get('assets/json/lista.json').subscribe(
		(respuesta)=> { this.libros = respuesta; this.cargando = false; },
		(respuesta)=> { this.errorHttp = true; }
	)
}

#Y ahora nos vamos a la plantilla del componente de listado de libros
scr > app > lista-de-libros > lista-de-libros.component.html

#Y añadimos el mensaje CARGANDO en la plantilla
#y un condicional para que se muestre o se oculte el mensaje en función de la carga

<div class="container">
	<div *nfIf="cargando">CARGANDO...</div>
	<ul>
		<li *ngFor="let libro of libros">
			<a	(click)="agregarLibro(libro)"
				[routerLink]="['/detalles', libro.id]"> {{libro.titulo}} </a> 
		</li>
	</ul>

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@



